{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least one array element in a provided array passes a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the provided output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 0, 0 ];\n*\n* var out = [ false, false, false, false, false ];\n* var y = indexed( x, out, 1, 0, isPositive );\n* // returns [ false, false, false, true, true ]\n*/\nfunction indexed( x, y, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = x.length - 1; i >= 0; i-- ) {\n\t\tif ( !flg && predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\ty[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Cumulatively tests whether at least one array element in a provided array passes a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the accessor output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 0, 1, 0, 0, 0 ] );\n*\n* var out = toAccessorArray( [ false, false, false, false, false ] );\n* var y = accessors( arraylike2object( x ), arraylike2object( out ), 1, 0, isPositive );\n*\n* var v = out.get( 4 );\n* // returns true\n*/\nfunction accessors( x, y, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = xdata.length - 1; i >= 0; i-- ) {\n\t\tif ( !flg && predicate.call( thisArg, xget( xdata, i ), i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one array element in a provided array passes a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 0 ];\n*\n* var y = [ false, null, false, null, false, null, false, null ];\n* var out = assign( x, y, 2, 0, isPositive );\n* // returns [ false, null, ..., true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, out, stride, offset, predicate, thisArg ) {\n\tvar xo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\taccessors( xo, oo, stride, offset, predicate, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, out, stride, offset, predicate, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one array element in a provided array passes a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 0, 0 ];\n*\n* var y = cuanyByRight( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*/\nfunction cuanyByRight( x, predicate, thisArg ) {\n\tvar out = filled( false, x.length );\n\treturn assign( x, out, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default cuanyByRight;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least one array element in a provided array passes a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @module @stdlib/array-base-cuany-by-right\n*\n* @example\n* import cuanyByRight from '@stdlib/array-base-cuany-by-right';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 0, 0 ];\n*\n* var y = cuanyByRight( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*\n* @example\n* import cuanyByRight from '@stdlib/array-base-cuany-by-right';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 0, 0 ];\n*\n* var y1 = cuanyByRight( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*\n* var y2 = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = cuanyByRight.assign( x, y2, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, true, null, true, null ]\n*\n* var bool = ( out === y2 );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["assign","x","out","stride","offset","predicate","thisArg","xo","oo","arraylike2object","accessorProtocol","y","xdata","ydata","xget","yset","flg","io","i","data","accessors","length","call","indexed","cuanyByRight","filled","setReadOnly","main"],"mappings":";;0TAsJA,SAASA,EAAQC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACnD,IAAIC,EACAC,EAIJ,OAFAD,EAAKE,EAAkBR,GACvBO,EAAKC,EAAkBP,GAEtBK,EAAGG,kBACHF,EAAGE,kBA/DL,SAAoBT,EAAGU,EAAGR,EAAQC,EAAQC,EAAWC,GACpD,IAAIM,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAN,EAAQX,EAAEkB,KACVN,EAAQF,EAAEQ,KAEVL,EAAOb,EAAEmB,UAAW,GACpBL,EAAOJ,EAAES,UAAW,GAEpBJ,GAAM,EACNC,EAAKb,EACCc,EAAIN,EAAMS,OAAS,EAAGH,GAAK,EAAGA,KAC7BF,GAAOX,EAAUiB,KAAMhB,EAASQ,EAAMF,EAAOM,GAAKA,EAAGjB,KAC1De,GAAM,GAEPD,EAAMF,EAAOI,EAAID,GACjBC,GAAMd,CAGR,CAwCEiB,CAAWb,EAAIC,EAAIL,EAAQC,EAAQC,EAAWC,GACvCJ,IA/GT,SAAkBD,EAAGU,EAAGR,EAAQC,EAAQC,EAAWC,GAClD,IAAIU,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKb,EACCc,EAAIjB,EAAEoB,OAAS,EAAGH,GAAK,EAAGA,KACzBF,GAAOX,EAAUiB,KAAMhB,EAASL,EAAGiB,GAAKA,EAAGjB,KAChDe,GAAM,GAEPL,EAAGM,GAAOD,EACVC,GAAMd,CAGR,CAkGCoB,CAAStB,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACrCJ,EACR,CCvHA,SAASsB,EAAcvB,EAAGI,EAAWC,GAEpC,OAAON,EAAQC,EADLwB,GAAQ,EAAOxB,EAAEoB,QACJ,EAAG,EAAGhB,EAAWC,EACzC,CCiBAoB,EAAAC,EAAA,SAAA3B"}